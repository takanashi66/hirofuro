!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:o})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/",n(n.s=120)}({120:function(t,e,n){n(121),t.exports=n(123)},121:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(122),r=n.n(o);document.addEventListener("DOMContentLoaded",function(){new r.a({trigger:"a[href^='#']"})},!1)},122:function(t,e,n){var o;o=function(){"use strict";var t=function(){return(t=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)},e=!("undefined"==typeof window||!window.document||!window.document.createElement),n=!!e&&(window.history&&"pushState"in window.history&&"file:"!==window.location.protocol),o=function(){var t=!1;if(!e)return t;try{var n=window,o=Object.defineProperty({},"passive",{get:function(){t=!0}});n.addEventListener("test",null,o),n.removeEventListener("test",null,o)}catch(t){}return t}(),r=function(t){return"string"==typeof t},i=function(t){return"function"==typeof t},u=function(t){return Array.isArray(t)},a=function(t,e){return t&&t.hasOwnProperty(e)},l=e?window.requestAnimationFrame.bind(window):null,s=e?window.cancelAnimationFrame.bind(window):null,c=Math.cos,f=Math.sin,p=Math.pow,h=Math.sqrt,d=Math.PI,v={linear:function(t){return t},easeInQuad:function(t,e,n,o,r){return o*(e/=r)*e+n},easeOutQuad:function(t,e,n,o,r){return-o*(e/=r)*(e-2)+n},easeInOutQuad:function(t,e,n,o,r){return(e/=r/2)<1?o/2*e*e+n:-o/2*(--e*(e-2)-1)+n},easeInCubic:function(t,e,n,o,r){return o*(e/=r)*e*e+n},easeOutCubic:function(t,e,n,o,r){return o*((e=e/r-1)*e*e+1)+n},easeInOutCubic:function(t,e,n,o,r){return(e/=r/2)<1?o/2*e*e*e+n:o/2*((e-=2)*e*e+2)+n},easeInQuart:function(t,e,n,o,r){return o*(e/=r)*e*e*e+n},easeOutQuart:function(t,e,n,o,r){return-o*((e=e/r-1)*e*e*e-1)+n},easeInOutQuart:function(t,e,n,o,r){return(e/=r/2)<1?o/2*e*e*e*e+n:-o/2*((e-=2)*e*e*e-2)+n},easeInQuint:function(t,e,n,o,r){return o*(e/=r)*e*e*e*e+n},easeOutQuint:function(t,e,n,o,r){return o*((e=e/r-1)*e*e*e*e+1)+n},easeInOutQuint:function(t,e,n,o,r){return(e/=r/2)<1?o/2*e*e*e*e*e+n:o/2*((e-=2)*e*e*e*e+2)+n},easeInSine:function(t,e,n,o,r){return-o*c(e/r*(d/2))+o+n},easeOutSine:function(t,e,n,o,r){return o*f(e/r*(d/2))+n},easeInOutSine:function(t,e,n,o,r){return-o/2*(c(d*e/r)-1)+n},easeInExpo:function(t,e,n,o,r){return 0===e?n:o*p(2,10*(e/r-1))+n},easeOutExpo:function(t,e,n,o,r){return e===r?n+o:o*(1-p(2,-10*e/r))+n},easeInOutExpo:function(t,e,n,o,r){return 0===e?n:e===r?n+o:(e/=r/2)<1?o/2*p(2,10*(e-1))+n:o/2*(2-p(2,-10*--e))+n},easeInCirc:function(t,e,n,o,r){return-o*(h(1-(e/=r)*e)-1)+n},easeOutCirc:function(t,e,n,o,r){return o*h(1-(e=e/r-1)*e)+n},easeInOutCirc:function(t,e,n,o,r){return(e/=r/2)<1?-o/2*(h(1-e*e)-1)+n:o/2*(h(1-(e-=2)*e)+1)+n}},g=function(t){return Array.prototype.slice.call(t?document.querySelectorAll(t):[])},w=function(t){return g(t).shift()||null},m=function(t){return t instanceof Element},y=function(t){return t===window},x=function(t){return t===document.documentElement||t===document.body},b=function(t,e){if(m(e))return t===e;for(var n=g(e),o=n.length;--o>=0&&n[o]!==t;);return o>-1},O=function(t){return Math.max(t.scrollHeight,t.clientHeight,t.offsetHeight)},M=function(t){return Math.max(t.scrollWidth,t.clientWidth,t.offsetWidth)},$=function(t){return{width:M(t),height:O(t)}},E={y:"scrollTop",x:"scrollLeft"},I={y:"pageYOffset",x:"pageXOffset"},C=function(t,e){return y(t)?t[I[e]]:t[E[e]]},k=function(t,e,n){if(y(t)){var o="y"===n;t.scrollTo(o?t.pageXOffset:e,o?e:t.pageYOffset)}else t[E[n]]=e},P=function(t,e){var n=t.getBoundingClientRect();if(n.width||n.height){var o={top:0,left:0},r=void 0;if(y(e)||x(e))r=document.documentElement,o.top=window[I.y],o.left=window[I.x];else{var i=(r=e).getBoundingClientRect();o.top=-1*i.top+r[E.y],o.left=-1*i.left+r[E.x]}return{top:n.top+o.top-r.clientTop,left:n.left+o.left-r.clientLeft}}return n},L=e?"onwheel"in document?"wheel":"mousewheel":"wheel",S=function(t,e,n,r,i){n.split(" ").forEach(function(n){t[e](function(t){return"wheel"===t?L:t}(n),r,!!o&&{passive:i})})},A=function(t,e,n,o){return S(t,"addEventListener",e,n,o)},Q=function(t,e,n,o){return S(t,"removeEventListener",e,n,o)},j=/^(\+|-)=(\d+(?:\.\d+)?)$/,z=function(e,n){var o,i={top:0,left:0,relative:!1};if(a(e,"top")||a(e,"left"))i=t({},i,e);else if(u(e))if(e.length>1)i.top=e[0],i.left=e[1];else{if(1!==e.length)return null;i.top=n?e[0]:0,i.left=n?0:e[0]}else if(!u(o=e)&&o-parseFloat(o)+1>=0)n?i.top=e:i.left=e;else{if(!r(e))return null;var l=e.trim().match(j);if(!l)return null;var s=l[1],c=parseInt(l[2],10);"+"===s?(i.top=n?c:0,i.left=n?0:c):(i.top=n?-c:0,i.left=n?0:-c),i.relative=!0}return i},W={trigger:"[data-scroll]",header:"[data-scroll-header]",duration:1e3,easing:"easeOutQuint",offset:0,vertical:!0,horizontal:!1,cancellable:!0,updateURL:!1,preventDefault:!0,stopPropagation:!0,before:null,after:null,cancel:null,complete:null,step:null};return function(){function o(n,r){var i=this;this.$el=null,this.ctx={$trigger:null,opts:null,progress:!1,pos:null,startPos:null,easing:null,start:0,id:0,cancel:!1,hash:null},this.loop=function(t){var e=i,n=e.$el,r=e.ctx;if(r.start||(r.start=t),r.progress&&n){var u=r.opts,a=r.pos,l=r.start,s=r.startPos,c=r.easing,f=u.duration,p={top:"y",left:"x"},h=t-l,d=Math.min(1,Math.max(h/f,0));Object.keys(a).forEach(function(t){var e=a[t],o=s[t],r=e-o;if(0!==r){var i=c(d,f*d,0,1,f);k(n,Math.round(o+r*i),p[t])}}),h<=f?(i.hook(u,"step",d),r.id=o.raf(i.loop)):i.stop(!0)}else i.stop()},this.handleClick=function(e){for(var n=i.opts,o=e.target;o&&o!==document;o=o.parentNode)if(b(o,n.trigger)){var r=JSON.parse(o.getAttribute("data-scroll-options")||"{}"),u=o.getAttribute("data-scroll")||o.getAttribute("href"),a=t({},n,r),l=a.preventDefault,s=a.stopPropagation,c=a.vertical,f=a.horizontal;l&&e.preventDefault(),s&&e.stopPropagation(),i.ctx.$trigger=o,f&&c?i.to(u,a):c?i.toTop(u,a):f&&i.toLeft(u,a);break}},this.handleStop=function(t){var e=i.ctx,n=e.opts;n&&n.cancellable?(e.cancel=!0,i.stop()):t.preventDefault()},this.opts=t({},W,n||{});var u=null;e&&(u="string"==typeof r?w(r):null!=r?r:window),this.$el=u,u&&this.bind(!0,!1)}return o.create=function(t,e){return new o(t,e)},o.prototype.to=function(n,o){if(e){var i=this.$el,u=this.ctx,a=this.opts,l=u.$trigger,s=t({},a,o||{}),c=s.offset,f=s.vertical,p=s.horizontal,h=m(s.header)?s.header:w(s.header),d=r(n)&&/^#/.test(n)?n:null;if(u.opts=s,u.cancel=!1,u.hash=d,this.stop(),i){var v=z(c,f),g=z(n,f),b={top:0,left:0};if(g)if(g.relative){var E=C(i,f?"y":"x");b.top=f?E+g.top:g.top,b.left=f?g.left:E+g.left}else b=g;else if(r(n)&&"#"!==n){var I=w(n);if(!I)return;b=P(I,i)}v&&(b.top+=v.top,b.left+=v.left),h&&(b.top=Math.max(0,b.top-$(h).height));var k=function(t){var e=y(t)||x(t);return{viewport:{width:e?Math.min(window.innerWidth,document.documentElement.clientWidth):t.clientWidth,height:e?window.innerHeight:t.clientHeight},size:e?{width:Math.max(M(document.body),M(document.documentElement)),height:Math.max(O(document.body),O(document.documentElement))}:$(t)}}(i),L=k.viewport,S=k.size;b.top=f?Math.max(0,Math.min(S.height-L.height,b.top)):C(i,"y"),b.left=p?Math.max(0,Math.min(S.width-L.width,b.left)):C(i,"x"),!1!==this.hook(s,"before",b,l)?(u.pos=b,this.start(s),this.bind(!1,!0)):u.opts=null}}},o.prototype.toTop=function(e,n){this.to(e,t({},n||{},{vertical:!0,horizontal:!1}))},o.prototype.toLeft=function(e,n){this.to(e,t({},n||{},{vertical:!1,horizontal:!0}))},o.prototype.toElement=function(t,n){var o=this.$el;e&&o&&this.to(P(t,o),n||{})},o.prototype.stop=function(t){void 0===t&&(t=!1);var e=this.$el,n=this.ctx,r=n.pos;e&&n.progress&&(o.caf(n.id),n.progress=!1,n.start=0,n.id=0,t&&r&&(k(e,r.left,"x"),k(e,r.top,"y")),this.complete())},o.prototype.update=function(e){if(this.$el){var n=t({},this.opts,e);this.stop(),this.unbind(!0,!0),this.opts=n,this.bind(!0,!1)}},o.prototype.destroy=function(){this.$el&&(this.stop(),this.unbind(!0,!0),this.$el=null)},o.prototype.onBefore=function(t,e){return!0},o.prototype.onStep=function(t){},o.prototype.onAfter=function(t,e){},o.prototype.onCancel=function(){},o.prototype.onComplete=function(t){},o.prototype.start=function(t){var e=this.ctx;e.opts=t,e.progress=!0,e.easing=i(t.easing)?t.easing:v[t.easing];var n=this.$el,r={top:C(n,"y"),left:C(n,"x")};e.startPos=r,e.id=o.raf(this.loop)},o.prototype.complete=function(){var t=this.$el,o=this.ctx,r=o.hash,i=o.cancel,u=o.opts,a=o.pos,l=o.$trigger;if(t&&u){if(null!=r&&r!==window.location.hash){var s=u.updateURL;e&&n&&!1!==s&&window.history["replace"===s?"replaceState":"pushState"](null,"",r)}this.unbind(!1,!0),o.opts=null,o.$trigger=null,i?this.hook(u,"cancel"):this.hook(u,"after",a,l),this.hook(u,"complete",i)}},o.prototype.hook=function(t,e){for(var n,o=[],r=2;r<arguments.length;r++)o[r-2]=arguments[r];var u,a,l=t[e];return i(l)&&(u=l.apply(this,o.concat([this]))),a=(n=this)["on"+(e[0].toUpperCase()+e.slice(1))].apply(n,o),void 0!==u?u:a},o.prototype.bind=function(t,e){var n=this.$el,o=this.ctx.opts;n&&(t&&A(n,"click",this.handleClick,!1),e&&A(n,"wheel touchstart touchmove",this.handleStop,!o||o.cancellable))},o.prototype.unbind=function(t,e){var n=this.$el,o=this.ctx.opts;n&&(t&&Q(n,"click",this.handleClick,!1),e&&Q(n,"wheel touchstart touchmove",this.handleStop,!o||o.cancellable))},o.raf=l,o.caf=s,o}()},t.exports=o()},123:function(t,e){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,